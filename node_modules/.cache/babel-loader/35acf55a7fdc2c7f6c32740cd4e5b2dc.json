{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\n\ntype: FETCHING_PRODUCT;\n\nimport AuthService from \"../services/auth.service\";\nexport const register = (firstname, lastname, username, email, password) => dispatch => {\n  return AuthService.register(firstname, lastname, username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/kenny/ecommerce-front1/src/actions/auth.action.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","type","FETCHING_PRODUCT","AuthService","register","firstname","lastname","username","email","password","dispatch","then","response","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,WANJ,QAOS,SAPT;;AAOmBC,IAAI,EAAEC,gBAAgB;;AAEvC,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgCC,KAAhC,EAAuCC,QAAvC,KAAqDC,QAAD,IAAc;AACxF,SAAOP,WAAW,CAACC,QAAZ,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,KAApD,EAA2DC,QAA3D,EAAqEE,IAArE,CACJC,QAAD,IAAc;AACZF,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAEN;AADC,KAAD,CAAR;AAIAe,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAED,WADC;AAEPa,MAAAA,OAAO,EAAED,QAAQ,CAACE,IAAT,CAAcC;AAFhB,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD,GAZI,EAaJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACN,QAAN,IACCM,KAAK,CAACN,QAAN,CAAeE,IADhB,IAECI,KAAK,CAACN,QAAN,CAAeE,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAT,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAIAc,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAED,WADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GA/BI,CAAP;AAiCD,CAlCM;AAoCP,OAAO,MAAMC,KAAK,GAAG,CAACd,QAAD,EAAWE,QAAX,KAAyBC,QAAD,IAAc;AACzD,SAAOP,WAAW,CAACkB,KAAZ,CAAkBd,QAAlB,EAA4BE,QAA5B,EAAsCE,IAAtC,CACJG,IAAD,IAAU;AACRJ,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAEJ,aADC;AAEPgB,MAAAA,OAAO,EAAE;AAAES,QAAAA,IAAI,EAAER;AAAR;AAFF,KAAD,CAAR;AAKA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACD,GARI,EASJC,KAAD,IAAW;AACT,UAAMH,OAAO,GACVG,KAAK,CAACN,QAAN,IACCM,KAAK,CAACN,QAAN,CAAeE,IADhB,IAECI,KAAK,CAACN,QAAN,CAAeE,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;AAOAT,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAEH;AADC,KAAD,CAAR;AAIAY,IAAAA,QAAQ,CAAC;AACPT,MAAAA,IAAI,EAAED,WADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAKA,WAAOC,OAAO,CAACI,MAAR,EAAP;AACD,GA3BI,CAAP;AA6BD,CA9BM;AAgCP,OAAO,MAAMG,MAAM,GAAG,MAAOb,QAAD,IAAc;AACxCP,EAAAA,WAAW,CAACoB,MAAZ;AAEAb,EAAAA,QAAQ,CAAC;AACPT,IAAAA,IAAI,EAAEF;AADC,GAAD,CAAR;AAGD,CANM","sourcesContent":["import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    SET_MESSAGE,\n  } from \"./types\";type: FETCHING_PRODUCT\n  \n  import AuthService from \"../services/auth.service\";\n  \n  export const register = (firstname, lastname, username, email, password) => (dispatch) => {\n    return AuthService.register(firstname, lastname, username, email, password).then(\n      (response) => {\n        dispatch({\n          type: REGISTER_SUCCESS,\n        });\n  \n        dispatch({\n          type: SET_MESSAGE,\n          payload: response.data.message,\n        });\n  \n        return Promise.resolve();\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n  \n        dispatch({\n          type: REGISTER_FAIL,\n        });\n  \n        dispatch({\n          type: SET_MESSAGE,\n          payload: message,\n        });\n  \n        return Promise.reject();\n      }\n    );\n  };\n  \n  export const login = (username, password) => (dispatch) => {\n    return AuthService.login(username, password).then(\n      (data) => {\n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: { user: data },\n        });\n  \n        return Promise.resolve();\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n  \n        dispatch({\n          type: LOGIN_FAIL,\n        });\n  \n        dispatch({\n          type: SET_MESSAGE,\n          payload: message,\n        });\n  \n        return Promise.reject();\n      }\n    );\n  };\n  \n  export const logout = () => (dispatch) => {\n    AuthService.logout();\n  \n    dispatch({\n      type: LOGOUT,\n    });\n  };\n  "]},"metadata":{},"sourceType":"module"}