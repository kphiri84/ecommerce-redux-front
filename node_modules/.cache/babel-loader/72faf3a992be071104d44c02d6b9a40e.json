{"ast":null,"code":"import { FETCHING_CART, ADD_TO_CART_SUCCESS, CLEAR_ERROR_MESSAGE, FETCHING_CART_SUCCESS, FETCHING_CART_FAILURE, PAY_TOTAL_FAILURE, PAID_TOTAL_SUCCESSFULLY } from './types';\nimport axios from 'axios';\nimport CartService from '../services/cart.service';\nimport Cookie from \"js-cookie\";\nexport const fetchingCart = () => {\n  return {\n    type: FETCHING_CART\n  };\n};\nexport const addToCartSuccess = () => {\n  return {\n    type: ADD_TO_CART_SUCCESS,\n    message: 'Added to cart.'\n  };\n};\nexport const clearMessage = () => {\n  return {\n    type: CLEAR_ERROR_MESSAGE\n  };\n};\nexport const fetchingCartSuccess = cart => {\n  return {\n    type: FETCHING_CART_SUCCESS,\n    cart\n  };\n};\nexport const fetchingCartError = error => {\n  return {\n    type: FETCHING_CART_FAILURE,\n    error\n  };\n};\nexport const failedToPay = error => {\n  return {\n    type: PAY_TOTAL_FAILURE,\n    error\n  };\n};\nexport const successfullyPaid = () => {\n  return {\n    type: PAID_TOTAL_SUCCESSFULLY\n  };\n};\nexport const addToCart = (id, quantity) => async (dispatch, getState) => {\n  try {\n    const {\n      data\n    } = await axios.get(`http://localhost:3001/api/products/${id}`);\n    dispatch({\n      type: ADD_TO_CART_SUCCESS,\n      payload: {\n        id: data.id,\n        quantity\n      }\n    });\n    console.log(data.name);\n    const {\n      cart: {\n        cart\n      }\n    } = getState();\n    Cookie.set(\"cart\", JSON.stringify(cart));\n  } catch (error) {}\n};\nexport const fetchCart = () => dispatch => {\n  dispatch(fetchingCart());\n  return CartService.fetchCart().then(res => dispatch(fetchingCartSuccess(res.data[0]))).catch(err => {\n    let error = 'Could not get the cart infomation.'; // if (err.response && err.response.data && err.response.data) {\n    //   error = err.response.data;\n    // }\n\n    return dispatch(fetchingCartError(error));\n  });\n};\nexport const deletefromCart = id => dispatch => {\n  dispatch(fetchingCart());\n  return CartService.deletefromCart().then(res => dispatch(fetchingCartSuccess(res.data[0]))).catch(err => {\n    let error = 'Could not remove the product.'; // if (err.response && err.response.data && err.response.data) {\n    //   error = err.response.data;\n    // }\n\n    return dispatch(fetchingCartError(error));\n  });\n}; // export const payTotal = (cartObject) => (dispatch) => {\n// \treturn CartService.payTotal()\n// \t\t.then((res) => {\n// \t\t\tdispatch(successfullyPaid());\n// \t\t\treturn browserHistory.push('/account');\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tlet error = 'Could not purchase them.';\n// \t\t\t// if (err.response && err.response.data && err.response.data) {\n// \t\t\t//   error = err.response.data;\n// \t\t\t// }\n// \t\t\treturn dispatch(failedToPay(error));\n// \t\t});\n// };","map":{"version":3,"sources":["/home/kenny/ecommerce-redux-front/src/actions/cart.action.js"],"names":["FETCHING_CART","ADD_TO_CART_SUCCESS","CLEAR_ERROR_MESSAGE","FETCHING_CART_SUCCESS","FETCHING_CART_FAILURE","PAY_TOTAL_FAILURE","PAID_TOTAL_SUCCESSFULLY","axios","CartService","Cookie","fetchingCart","type","addToCartSuccess","message","clearMessage","fetchingCartSuccess","cart","fetchingCartError","error","failedToPay","successfullyPaid","addToCart","id","quantity","dispatch","getState","data","get","payload","console","log","name","set","JSON","stringify","fetchCart","then","res","catch","err","deletefromCart"],"mappings":"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","sourcesContent":["import {\n\tFETCHING_CART,\n\tADD_TO_CART_SUCCESS,\n\tCLEAR_ERROR_MESSAGE,\n\tFETCHING_CART_SUCCESS,\n\tFETCHING_CART_FAILURE,\n\tPAY_TOTAL_FAILURE,\n\tPAID_TOTAL_SUCCESSFULLY\n} from './types';\nimport axios from 'axios';\nimport CartService from '../services/cart.service';\nimport Cookie from \"js-cookie\";\nexport const fetchingCart = () => {\n\treturn {\n\t\ttype: FETCHING_CART\n\t};\n};\n\nexport const addToCartSuccess = () => {\n\treturn {\n\t\ttype: ADD_TO_CART_SUCCESS,\n\t\tmessage: 'Added to cart.'\n\t};\n};\n\nexport const clearMessage = () => {\n\treturn {\n\t\ttype: CLEAR_ERROR_MESSAGE\n\t};\n};\n\nexport const fetchingCartSuccess = (cart) => {\n\treturn {\n\t\ttype: FETCHING_CART_SUCCESS,\n\t\tcart\n\t};\n};\n\nexport const fetchingCartError = (error) => {\n\treturn {\n\t\ttype: FETCHING_CART_FAILURE,\n\t\terror\n\t};\n};\n\nexport const failedToPay = (error) => {\n\treturn {\n\t\ttype: PAY_TOTAL_FAILURE,\n\t\terror\n\t};\n};\n\nexport const successfullyPaid = () => {\n\treturn {\n\t\ttype: PAID_TOTAL_SUCCESSFULLY\n\t};\n};\n\nexport const addToCart = (id, quantity)=> async (dispatch, getState) =>  {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axios.get(`http://localhost:3001/api/products/${id}`);\n\t\t\t\t\tdispatch({\n\t\t\t\t\t  type: ADD_TO_CART_SUCCESS, payload: {\n\t\t\t\t\t\tid:data.id,\n\t\t\t\t\t\tquantity\n\t\t\t\t\t  }\n\t\t\t\t\t});\n\t\t\t\t\tconsole.log(data.name)\n\t\t\t\t\tconst { cart: { cart } } = getState();\n\t\t\t\t\tCookie.set(\"cart\", JSON.stringify(cart));\n\t\t\t\t\n\t\t\t\t  } catch (error) {\n\n\t\t\t\t}\n\t\t\t\n\t};\n\n\nexport const fetchCart = () => (dispatch) => {\n\tdispatch(fetchingCart());\n\treturn CartService.fetchCart().then((res) => dispatch(fetchingCartSuccess(res.data[0]))).catch((err) => {\n\t\tlet error = 'Could not get the cart infomation.';\n\t\t// if (err.response && err.response.data && err.response.data) {\n\t\t//   error = err.response.data;\n\t\t// }\n\t\treturn dispatch(fetchingCartError(error));\n\t});\n};\n\nexport const deletefromCart = (id) => (dispatch) => {\n\tdispatch(fetchingCart());\n\treturn CartService.deletefromCart().then((res) => dispatch(fetchingCartSuccess(res.data[0]))).catch((err) => {\n\t\tlet error = 'Could not remove the product.';\n\t\t// if (err.response && err.response.data && err.response.data) {\n\t\t//   error = err.response.data;\n\t\t// }\n\t\treturn dispatch(fetchingCartError(error));\n\t});\n};\n\n// export const payTotal = (cartObject) => (dispatch) => {\n// \treturn CartService.payTotal()\n// \t\t.then((res) => {\n// \t\t\tdispatch(successfullyPaid());\n// \t\t\treturn browserHistory.push('/account');\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tlet error = 'Could not purchase them.';\n// \t\t\t// if (err.response && err.response.data && err.response.data) {\n// \t\t\t//   error = err.response.data;\n// \t\t\t// }\n// \t\t\treturn dispatch(failedToPay(error));\n// \t\t});\n// };\n"]},"metadata":{},"sourceType":"module"}