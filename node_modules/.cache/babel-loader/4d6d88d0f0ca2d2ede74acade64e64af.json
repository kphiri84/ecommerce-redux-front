{"ast":null,"code":"import axios from 'axios';\nexport const FETCHING_PRODUCTS = 'FETCHING_PRODUCTS';\nexport const FETCHING_PRODUCTS_SUCCESS = 'FETCHING_PRODUCTS_SUCCESS';\nexport const FETCHING_PRODUCTS_FAILURE = 'FETCHING_PRODUCTS_FAILURE';\nexport function fetchingProducts() {\n  return {\n    type: FETCHING_PRODUCTS\n  };\n}\nexport function fetchingProductsSuccess(product) {\n  return {\n    type: FETCHING_PRODUCTS_SUCCESS,\n    product\n  };\n}\nexport function fetchingProductsError(error) {\n  return {\n    type: FETCHING_PRODUCTS_FAILURE,\n    error\n  };\n}\nexport function fetchProducts() {\n  return function (dispatch) {\n    dispatch(fetchingProducts());\n    return axios.get(`http://localhost:3001/api/products`).then(res => dispatch(fetchingProductsSuccess(res.data))).catch(err => {\n      let error = 'Could not get the product list.'; // if (err.response && err.response.data && err.response.data) {\n      //   error = err.response.data;\n      // }\n\n      return dispatch(fetchingProductsError(error));\n    });\n  };\n}\nconst initialState = {\n  product: [],\n  error: '',\n  isFetching: false\n};\nexport default function products(state = initialState, action) {\n  switch (action.type) {\n    case FETCHING_PRODUCTS:\n      return state.merge({\n        isFetching: true\n      });\n\n    case FETCHING_PRODUCTS_FAILURE:\n      return state.merge({\n        isFetching: false,\n        error: action.error\n      });\n\n    case FETCHING_PRODUCTS_SUCCESS:\n      return state.merge({\n        isFetching: false,\n        error: '',\n        products: action.products\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/kenny/ecommerce-front1/src/reducers/product.reducer.js"],"names":["axios","FETCHING_PRODUCTS","FETCHING_PRODUCTS_SUCCESS","FETCHING_PRODUCTS_FAILURE","fetchingProducts","type","fetchingProductsSuccess","product","fetchingProductsError","error","fetchProducts","dispatch","get","then","res","data","catch","err","initialState","isFetching","products","state","action","merge"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AAEP,OAAO,SAASC,gBAAT,GAA6B;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAED,OAAO,SAASK,uBAAT,CAAkCC,OAAlC,EAA2C;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAEH,yBADD;AAELK,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,qBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,SAAO;AACLJ,IAAAA,IAAI,EAAEF,yBADD;AAELM,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,aAAT,GAA0B;AAC/B,SAAO,UAAUC,QAAV,EAAoB;AACzBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA,WAAOJ,KAAK,CAACY,GAAN,CAAW,oCAAX,EACJC,IADI,CACEC,GAAD,IAASH,QAAQ,CAACL,uBAAuB,CAACQ,GAAG,CAACC,IAAL,CAAxB,CADlB,EAEJC,KAFI,CAEGC,GAAD,IAAS;AACd,UAAIR,KAAK,GAAG,iCAAZ,CADc,CAEd;AACA;AACA;;AACA,aAAOE,QAAQ,CAACH,qBAAqB,CAACC,KAAD,CAAtB,CAAf;AACD,KARI,CAAP;AASD,GAXD;AAYD;AAED,MAAMS,YAAY,GAAG;AACnBX,EAAAA,OAAO,EAAE,EADU;AAEnBE,EAAAA,KAAK,EAAE,EAFY;AAGnBU,EAAAA,UAAU,EAAE;AAHO,CAArB;AAMA,eAAe,SAASC,QAAT,CAAmBC,KAAK,GAAGH,YAA3B,EAAyCI,MAAzC,EAAiD;AAC9D,UAAQA,MAAM,CAACjB,IAAf;AAEE,SAAKJ,iBAAL;AACE,aAAOoB,KAAK,CAACE,KAAN,CAAY;AACjBJ,QAAAA,UAAU,EAAE;AADK,OAAZ,CAAP;;AAIF,SAAKhB,yBAAL;AACE,aAAOkB,KAAK,CAACE,KAAN,CAAY;AACjBJ,QAAAA,UAAU,EAAE,KADK;AAEjBV,QAAAA,KAAK,EAAEa,MAAM,CAACb;AAFG,OAAZ,CAAP;;AAKF,SAAKP,yBAAL;AACE,aAAOmB,KAAK,CAACE,KAAN,CAAY;AACjBJ,QAAAA,UAAU,EAAE,KADK;AAEjBV,QAAAA,KAAK,EAAE,EAFU;AAGjBW,QAAAA,QAAQ,EAAEE,MAAM,CAACF;AAHA,OAAZ,CAAP;;AAMF;AACE,aAAOC,KAAP;AArBJ;AAuBD","sourcesContent":["import axios from 'axios';\n\nexport const FETCHING_PRODUCTS = 'FETCHING_PRODUCTS';\nexport const FETCHING_PRODUCTS_SUCCESS = 'FETCHING_PRODUCTS_SUCCESS';\nexport const FETCHING_PRODUCTS_FAILURE = 'FETCHING_PRODUCTS_FAILURE';\n\nexport function fetchingProducts () {\n  return {\n    type: FETCHING_PRODUCTS\n  };\n}\n\nexport function fetchingProductsSuccess (product) {\n  return {\n    type: FETCHING_PRODUCTS_SUCCESS,\n    product\n  };\n}\n\nexport function fetchingProductsError (error) {\n  return {\n    type: FETCHING_PRODUCTS_FAILURE,\n    error\n  };\n}\n\nexport function fetchProducts () {\n  return function (dispatch) {\n    dispatch(fetchingProducts());\n    return axios.get(`http://localhost:3001/api/products`)\n      .then((res) => dispatch(fetchingProductsSuccess(res.data)))\n      .catch((err) => {\n        let error = 'Could not get the product list.';\n        // if (err.response && err.response.data && err.response.data) {\n        //   error = err.response.data;\n        // }\n        return dispatch(fetchingProductsError(error))\n      });\n  };\n}\n\nconst initialState = {\n  product: [],\n  error: '',\n  isFetching: false,\n};\n\nexport default function products (state = initialState, action) {\n  switch (action.type) {\n\n    case FETCHING_PRODUCTS :\n      return state.merge({\n        isFetching: true\n      });\n\n    case FETCHING_PRODUCTS_FAILURE :\n      return state.merge({\n        isFetching: false,\n        error: action.error\n      });\n\n    case FETCHING_PRODUCTS_SUCCESS :\n      return state.merge({\n        isFetching: false,\n        error: '',\n        products: action.products,\n      });\n\n    default :\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}