{"ast":null,"code":"import { FETCHING_CART, ADD_TO_CART_SUCCESS, CLEAR_ERROR_MESSAGE, FETCHING_CART_SUCCESS, FETCHING_CART_FAILURE, PAY_TOTAL_FAILURE, PAID_TOTAL_SUCCESSFULLY } from '../actions/types';\nconst initialState = {\n  cart: [],\n  error: '',\n  isFetching: false,\n  message: ''\n}; // Reducers\n\nexport default function cart(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case FETCHING_CART:\n      return { ...state,\n        isFetching: true\n      };\n\n    case ADD_TO_CART_SUCCESS:\n      const newState = { ...state\n      };\n      console.log(...state);\n      const cartItem = newState.cart.find(ci => ci.id === action.product.id);\n\n      if (cartItem) {\n        // already in cart, only update quantity\n        cartItem.quantity = action.quantity;\n      } else {\n        // new cart item\n        newState.cartItems.push({ ...action.product,\n          quantity: action.quantity\n        });\n      }\n\n      return newState;\n      ;\n\n    case CLEAR_ERROR_MESSAGE:\n      return { ...state,\n        message: '',\n        error: ''\n      };\n\n    case FETCHING_CART_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.error\n      };\n\n    case FETCHING_CART_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        error: '',\n        cart: action.cart\n      };\n\n    case PAY_TOTAL_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.error\n      };\n\n    case PAID_TOTAL_SUCCESSFULLY:\n      return { ...state,\n        isFetching: false,\n        error: ''\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/kenny/ecommerce-front1/src/reducers/cart.reducer.js"],"names":["FETCHING_CART","ADD_TO_CART_SUCCESS","CLEAR_ERROR_MESSAGE","FETCHING_CART_SUCCESS","FETCHING_CART_FAILURE","PAY_TOTAL_FAILURE","PAID_TOTAL_SUCCESSFULLY","initialState","cart","error","isFetching","message","state","action","type","payload","newState","console","log","cartItem","find","ci","id","product","quantity","cartItems","push"],"mappings":"AAAA,SACCA,aADD,EAECC,mBAFD,EAGCC,mBAHD,EAICC,qBAJD,EAKCC,qBALD,EAMCC,iBAND,EAOCC,uBAPD,QAQO,kBARP;AAUA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,UAAU,EAAE,KAHQ;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAArB,C,CAOA;;AACA,eAAe,SAASH,IAAT,CAAcI,KAAK,GAAGL,YAAtB,EAAoCM,MAApC,EAA4C;AAC1D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACC,SAAKd,aAAL;AACC,aAAO,EACN,GAAGY,KADG;AAENF,QAAAA,UAAU,EAAE;AAFN,OAAP;;AAKD,SAAKT,mBAAL;AACC,YAAMe,QAAQ,GAAG,EAAC,GAAGJ;AAAJ,OAAjB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAGN,KAAf;AACA,YAAMO,QAAQ,GAAGH,QAAQ,CAACR,IAAT,CAAcY,IAAd,CAAmBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUT,MAAM,CAACU,OAAP,CAAeD,EAAlD,CAAjB;;AACS,UAAIH,QAAJ,EAAc;AACV;AACAA,QAAAA,QAAQ,CAACK,QAAT,GAAoBX,MAAM,CAACW,QAA3B;AACH,OAHD,MAGO;AACH;AACAR,QAAAA,QAAQ,CAACS,SAAT,CAAmBC,IAAnB,CAAwB,EAAC,GAAGb,MAAM,CAACU,OAAX;AAAoBC,UAAAA,QAAQ,EAAEX,MAAM,CAACW;AAArC,SAAxB;AACH;;AACD,aAAOR,QAAP;AACT;;AAED,SAAKd,mBAAL;AACC,aAAO,EACN,GAAGU,KADG;AAEND,QAAAA,OAAO,EAAE,EAFH;AAGNF,QAAAA,KAAK,EAAE;AAHD,OAAP;;AAMD,SAAKL,qBAAL;AACC,aAAO,EACN,GAAGQ,KADG;AAENF,QAAAA,UAAU,EAAE,KAFN;AAGND,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAHR,OAAP;;AAMD,SAAKN,qBAAL;AACC,aAAO,EACN,GAAGS,KADG;AAENF,QAAAA,UAAU,EAAE,KAFN;AAGND,QAAAA,KAAK,EAAE,EAHD;AAIND,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAJP,OAAP;;AAOD,SAAKH,iBAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENF,QAAAA,UAAU,EAAE,KAFN;AAGND,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAHR,OAAP;;AAMD,SAAKH,uBAAL;AACC,aAAO,EACN,GAAGM,KADG;AAENF,QAAAA,UAAU,EAAE,KAFN;AAGND,QAAAA,KAAK,EAAE;AAHD,OAAP;;AAMD;AACC,aAAOG,KAAP;AA1DF;AA4DA","sourcesContent":["import {\n\tFETCHING_CART,\n\tADD_TO_CART_SUCCESS,\n\tCLEAR_ERROR_MESSAGE,\n\tFETCHING_CART_SUCCESS,\n\tFETCHING_CART_FAILURE,\n\tPAY_TOTAL_FAILURE,\n\tPAID_TOTAL_SUCCESSFULLY\n} from '../actions/types';\n\nconst initialState = {\n\tcart: [],\n\terror: '',\n\tisFetching: false,\n\tmessage: ''\n};\n\n// Reducers\nexport default function cart(state = initialState, action) {\n\tconst { type, payload } = action;\n\tswitch (type) {\n\t\tcase FETCHING_CART:\n\t\t\treturn {\n\t\t\t\t...state, \n\t\t\t\tisFetching: true\n\t\t\t};\n\n\t\tcase ADD_TO_CART_SUCCESS:\n\t\t\tconst newState = {...state};\n\t\t\tconsole.log(...state)\n\t\t\tconst cartItem = newState.cart.find(ci => ci.id === action.product.id);\n            if (cartItem) {\n                // already in cart, only update quantity\n                cartItem.quantity = action.quantity;\n            } else {\n                // new cart item\n                newState.cartItems.push({...action.product, quantity: action.quantity})\n            }\n            return newState;\n\t\t\t;\n\n\t\tcase CLEAR_ERROR_MESSAGE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmessage: '',\n\t\t\t\terror: ''\n\t\t\t};\n\n\t\tcase FETCHING_CART_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\terror: action.error\n\t\t\t};\n\n\t\tcase FETCHING_CART_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\terror: '',\n\t\t\t\tcart: action.cart\n\t\t\t};\n\n\t\tcase PAY_TOTAL_FAILURE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\terror: action.error\n\t\t\t};\n\n\t\tcase PAID_TOTAL_SUCCESSFULLY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\terror: ''\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}